using System.Threading.Tasks;
using ComputeSharp.SourceGenerators;
using ComputeSharp.Tests.SourceGenerators.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ComputeSharp.Tests.SourceGenerators;

[TestClass]
public class Test_ComputeShaderDescriptorGenerator
{
    [TestMethod]
    public async Task SimpleShader_ComputeShader()
    {
        const string source = """
            using ComputeSharp;
            using float2 = global::ComputeSharp.Float2;
            using float3 = global::ComputeSharp.Float3;
            using float4 = global::ComputeSharp.Float4;

            namespace MyNamespace;

            [ThreadGroupSize(DefaultThreadGroupSizes.XY)]
            [GeneratedComputeShaderDescriptor]
            internal readonly partial struct MyShader : IComputeShader
            {
                private readonly IReadWriteNormalizedTexture2D<float4> texture;
                private readonly float time;

                public void Execute()
                {
                    float2 uv = ThreadIds.Normalized.XY;
                    float3 col = 0.5f + 0.5f * Hlsl.Cos(time + new float3(uv, uv.X) + new float3(0, 2, 4));
                    texture[ThreadIds.XY] = new float4(col, 1f);
                }
            }
            """;

        const string result = """"
            // <auto-generated/>
            #pragma warning disable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyShader"/>
                partial struct MyShader : global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>
                {
                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsX => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsY => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsZ => 1;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ConstantBufferSize => 16;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static bool global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.IsStaticSamplerRequired => false;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<global::ComputeSharp.Interop.ResourceDescriptorRange> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ResourceDescriptorRanges => global::ComputeSharp.Generated.Data.ResourceDescriptorRanges;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static string global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslSource =>
                        """
                        #define __GroupSize__get_X 8
                        #define __GroupSize__get_Y 8
                        #define __GroupSize__get_Z 1

                        cbuffer _ : register(b0)
                        {
                            uint __x;
                            uint __y;
                            uint __z;
                            float time;
                        }

                        RWTexture2D<unorm float4> __reserved__texture : register(u0);

                        [NumThreads(__GroupSize__get_X, __GroupSize__get_Y, __GroupSize__get_Z)]
                        void Execute(uint3 ThreadIds : SV_DispatchThreadID)
                        {
                            if (ThreadIds.x < __x && ThreadIds.y < __y && ThreadIds.z < __z)
                            {
                                float2 uv = float2(ThreadIds.x, ThreadIds.y) / float2(max(1, int2(__x, __y) - 1));
                                float3 col = 0.5 + 0.5 * cos(time + float3(uv, uv.x) + float3(0, 2, 4));
                                __reserved__texture[ThreadIds.xy] = float4(col, 1.0);
                            }
                        }
                        """;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<byte> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslBytecode => global::ComputeSharp.Generated.HlslBytecodeMemoryManager.Instance.Memory;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    [global::System.Runtime.CompilerServices.SkipLocalsInit]
                    static unsafe void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadConstantBuffer<TLoader>(in MyShader shader, ref TLoader loader, int x, int y, int z)
                    {
                        global::ComputeSharp.Generated.ConstantBufferMarshaller.FromManaged(in shader, out global::ComputeSharp.Generated.ConstantBuffer buffer);

                        buffer.__x = x;
                        buffer.__y = y;
                        buffer.__z = z;

                        loader.LoadConstantBuffer(new global::System.ReadOnlySpan<byte>(&buffer, sizeof(global::ComputeSharp.Generated.ConstantBuffer)));
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadGraphicsResources<TLoader>(in MyShader shader, ref TLoader loader)
                    {
                        global::ComputeSharp.Generated.GraphicsResourcesLoader.LoadGraphicsResources(in shader, ref loader);
                    }
                }
            }

            namespace ComputeSharp.Generated
            {
                using global::System;
                using global::System.Buffers;
                using global::System.CodeDom.Compiler;
                using global::System.Diagnostics;
                using global::System.Diagnostics.CodeAnalysis;
                using global::System.Runtime.CompilerServices;
                using global::System.Runtime.InteropServices;
                using global::ComputeSharp.Descriptors;
                using global::ComputeSharp.Interop;

                /// <summary>
                /// A type representing the constant buffer native layout for <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                file struct ConstantBuffer
                {
                    /// <summary>The artificial field backing <see cref="DispatchSize.X"/>.</summary>
                    [FieldOffset(0)]
                    public int __x;

                    /// <summary>The artificial field backing <see cref="DispatchSize.Y"/>.</summary>
                    [FieldOffset(4)]
                    public int __y;

                    /// <summary>The artificial field backing <see cref="DispatchSize.Z"/>.</summary>
                    [FieldOffset(8)]
                    public int __z;

                    /// <inheritdoc cref="global::MyNamespace.MyShader.time"/>
                    [FieldOffset(12)]
                    public float time;
                }

                /// <summary>
                /// A type containing marshalling logic for the constant buffer in shaders of type <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class ConstantBufferMarshaller
                {
                    /// <summary>
                    /// Marshals managed <see cref="global::MyNamespace.MyShader"/> instances to native constant buffer data.
                    /// </summary>
                    /// <param name="buffer">The input native constant buffer.</param>
                    /// <returns>The marshalled <see cref="global::MyNamespace.MyShader"/> instance.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    [SkipLocalsInit]
                    public static void FromManaged(in global::MyNamespace.MyShader shader, out ConstantBuffer buffer)
                    {
                        Unsafe.SkipInit(out buffer.__x);
                        Unsafe.SkipInit(out buffer.__y);
                        Unsafe.SkipInit(out buffer.__z);

                        buffer.time = shader.time();
                    }

                    /// <inheritdoc cref="global::MyNamespace.MyShader.time"/>
                    /// <param name="value">The input <see cref="global::MyNamespace.MyShader"/> value.</param>
                    /// <returns>A mutable reference to <see cref="global::MyNamespace.MyShader.time"/>.</returns>
                    [UnsafeAccessor(UnsafeAccessorKind.Field)]
                    private static extern ref readonly float time(this ref readonly global::MyNamespace.MyShader value);
                }

                /// <summary>
                /// A type containing loading logic for graphics resources in shaders of type <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class GraphicsResourcesLoader
                {
                    /// <inheritdoc cref="IComputeShaderDescriptor{T}.LoadGraphicsResources"/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static void LoadGraphicsResources<TLoader>(in global::MyNamespace.MyShader shader, ref TLoader loader)
                        where TLoader : struct, IGraphicsResourceLoader
                    {
                        loader.LoadGraphicsResource(shader.texture(), 0);
                    }

                    /// <inheritdoc cref="global::MyNamespace.MyShader.texture"/>
                    /// <param name="value">The input <see cref="global::MyNamespace.MyShader"/> value.</param>
                    /// <returns>A reference to <see cref="global::MyNamespace.MyShader.texture"/>.</returns>
                    [UnsafeAccessor(UnsafeAccessorKind.Field)]
                    private static extern ref readonly IReadWriteNormalizedTexture2D<float4> texture(this ref readonly global::MyNamespace.MyShader value);
                }

                /// <summary>
                /// A container type for additional data needed by the shader.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class Data
                {
                    /// <summary>The singleton <see cref="ResourceDescriptorRange"/> array instance.</summary>
                    public static readonly ResourceDescriptorRange[] ResourceDescriptorRanges =
                    [
                        new ResourceDescriptorRange(ResourceDescriptorRangeType.UnorderedAccessView, 0)
                    ];
                }

                /// <summary>
                /// <see cref="MemoryManager{T}"/> implementation to get the HLSL bytecode.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file sealed class HlslBytecodeMemoryManager : MemoryManager<byte>
                {
                    /// <summary>The singleton <see cref="HlslBytecodeMemoryManager"/> instance to use.</summary>
                    public static readonly HlslBytecodeMemoryManager Instance = new();

                    /// <summary>The RVA data with the HLSL bytecode.</summary>
                    private static ReadOnlySpan<byte> Data => [0x44, 0x58, 0x42, 0x43, 0x85, 0xAB, 0x89, 0xA8, 0x68, 0x86, 0x6C, 0x2B, 0x90, 0xB8, 0x38, 0x75, 0x15, 0x08, 0xEE, 0x86, 0x01, 0x00, 0x00, 0x00, 0xA0, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x88, 0x07, 0x00, 0x00, 0xA4, 0x07, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4F, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x78, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54, 0x94, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0xA5, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7C, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0x9C, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xA4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x52, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x91, 0x22, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xA4, 0x84, 0x04, 0x93, 0x22, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8A, 0x8C, 0x0B, 0x84, 0xA4, 0x4C, 0x10, 0x7C, 0x23, 0x00, 0x25, 0x00, 0x14, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0x63, 0x0C, 0x22, 0x85, 0x18, 0x63, 0x0C, 0x32, 0x33, 0x00, 0x65, 0x40, 0x03, 0x51, 0x9A, 0x23, 0x40, 0x68, 0xDD, 0x33, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x87, 0x40, 0x33, 0x2C, 0x04, 0x0A, 0x58, 0x59, 0xC0, 0x68, 0x63, 0x0C, 0x84, 0x10, 0x5A, 0xE4, 0x8E, 0x1A, 0x2E, 0x7F, 0xC2, 0x1E, 0x42, 0xF2, 0xB9, 0x8D, 0x2A, 0x56, 0x62, 0xF2, 0x8B, 0xDB, 0x46, 0x04, 0x42, 0x08, 0x15, 0x02, 0x8E, 0x36, 0x28, 0x1E, 0x35, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x73, 0x1B, 0x55, 0xAC, 0xC4, 0xE4, 0x23, 0xB7, 0x8D, 0x88, 0x31, 0xC6, 0x28, 0xC4, 0x1C, 0x6D, 0x10, 0x9D, 0x23, 0x08, 0x8A, 0xD1, 0xC6, 0x1A, 0xC3, 0xD2, 0x1D, 0x08, 0x18, 0x46, 0x20, 0x90, 0x99, 0xC8, 0x60, 0x1C, 0xD8, 0x21, 0x1C, 0xE6, 0x61, 0x1E, 0xDC, 0x40, 0x16, 0x6E, 0x81, 0x16, 0xCA, 0x01, 0x1F, 0xE8, 0xA1, 0x1E, 0xE4, 0xA1, 0x1C, 0xE4, 0x80, 0x14, 0xF8, 0xC0, 0x1E, 0xCA, 0x61, 0x1C, 0xE8, 0xE1, 0x1D, 0xE4, 0x81, 0x0F, 0xCC, 0x81, 0x1D, 0xDE, 0x21, 0x1C, 0xE8, 0x81, 0x0D, 0xC0, 0x80, 0x0E, 0xFC, 0x00, 0x0C, 0xFC, 0x00, 0x05, 0x9A, 0xF6, 0x05, 0x3F, 0x22, 0xC6, 0x18, 0x88, 0x3A, 0x00, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x25, 0x30, 0x02, 0x50, 0x0C, 0x45, 0x50, 0x1C, 0x05, 0x52, 0x06, 0xE5, 0x50, 0x0A, 0x25, 0x51, 0x08, 0x05, 0x51, 0x18, 0x85, 0x52, 0x58, 0x64, 0x47, 0x00, 0x6A, 0x80, 0xF8, 0x0C, 0x00, 0xF5, 0x19, 0x00, 0xF2, 0x33, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0xD8, 0x20, 0x10, 0x04, 0x85, 0xB1, 0xB9, 0x09, 0xC2, 0xA0, 0x6C, 0x18, 0x0E, 0x84, 0x98, 0x20, 0x70, 0x19, 0xA7, 0xAF, 0x2F, 0xB9, 0xB2, 0xB9, 0x32, 0x39, 0xBB, 0x32, 0xB2, 0xAF, 0x2F, 0xBA, 0x32, 0x3C, 0xBA, 0x3A, 0xB9, 0xB2, 0x09, 0xC2, 0xB0, 0x4C, 0x10, 0xAC, 0x6B, 0x82, 0x30, 0x30, 0x1B, 0x04, 0xC2, 0xD9, 0xB0, 0x10, 0xCA, 0x42, 0x10, 0x03, 0xD3, 0x34, 0xCD, 0xB3, 0x21, 0x80, 0x26, 0x08, 0xDE, 0xC6, 0xE0, 0x6B, 0x82, 0x30, 0x34, 0x1B, 0x10, 0x42, 0x9A, 0x08, 0x62, 0xA0, 0x80, 0x0D, 0x41, 0xB5, 0x81, 0x00, 0x22, 0x0B, 0x98, 0x20, 0x74, 0x1A, 0x87, 0xAF, 0x2F, 0xBC, 0x09, 0xC2, 0xE0, 0x4C, 0x10, 0x86, 0x67, 0x82, 0x30, 0x40, 0x13, 0x84, 0x21, 0x9A, 0x20, 0x58, 0xD8, 0x06, 0x04, 0xC9, 0x34, 0x62, 0xE3, 0x3A, 0x8F, 0xC3, 0xD7, 0x57, 0xDE, 0x04, 0x61, 0x90, 0x36, 0x20, 0x08, 0x18, 0x68, 0x61, 0xB0, 0x71, 0x9D, 0xC7, 0xE1, 0xEB, 0x4B, 0x6F, 0x82, 0x30, 0x4C, 0x1B, 0x10, 0x64, 0x0C, 0x34, 0x32, 0xD8, 0xB8, 0xCE, 0x23, 0x41, 0x97, 0xD6, 0x56, 0x36, 0x41, 0x18, 0xA8, 0x0D, 0x08, 0x62, 0x06, 0xDA, 0x19, 0x6C, 0x5D, 0xE7, 0x6D, 0x28, 0xA8, 0x4F, 0x0C, 0xCA, 0x00, 0x0D, 0x36, 0x0C, 0x04, 0x96, 0x06, 0x13, 0x04, 0x01, 0xD8, 0x00, 0x6C, 0x18, 0x08, 0x36, 0x60, 0x83, 0x0D, 0x41, 0x1B, 0x6C, 0x18, 0x86, 0x35, 0x70, 0x03, 0x1E, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x1B, 0x06, 0x32, 0x20, 0x83, 0x61, 0x83, 0x10, 0x06, 0x71, 0xB0, 0xA1, 0x58, 0x03, 0x38, 0x00, 0x2E, 0x39, 0x20, 0x22, 0x26, 0x17, 0xE6, 0x36, 0x86, 0x56, 0x36, 0x47, 0xC3, 0x8C, 0xED, 0x2D, 0x8C, 0x6E, 0x6E, 0x82, 0x30, 0x54, 0x2C, 0xD2, 0xDC, 0xE6, 0xE8, 0xE6, 0x26, 0x08, 0x83, 0x45, 0x22, 0xCD, 0x8D, 0x6E, 0x8E, 0x09, 0x5D, 0x19, 0xDE, 0xD7, 0x1C, 0xDD, 0x9B, 0x5C, 0x19, 0x8B, 0xBA, 0x34, 0x37, 0xBA, 0xB9, 0x0D, 0x0C, 0x1D, 0x30, 0x75, 0x60, 0x07, 0x77, 0x80, 0x07, 0x79, 0xB0, 0xE9, 0xC1, 0xB0, 0x07, 0x43, 0x15, 0x36, 0x36, 0xBB, 0x36, 0x97, 0x34, 0xB2, 0x32, 0x37, 0xBA, 0x29, 0x41, 0x50, 0x85, 0x0C, 0xCF, 0xC5, 0xAE, 0x4C, 0x6E, 0x2E, 0xED, 0xCD, 0x6D, 0x4A, 0x40, 0x34, 0x21, 0xC3, 0x73, 0xB1, 0x0B, 0x63, 0xB3, 0x2B, 0x93, 0x9B, 0x12, 0x14, 0x75, 0xC8, 0xF0, 0x5C, 0xE6, 0xD0, 0xC2, 0xC8, 0xCA, 0xE4, 0x9A, 0xDE, 0xC8, 0xCA, 0xD8, 0xA6, 0x04, 0x48, 0x19, 0x32, 0x3C, 0x17, 0xB9, 0xB2, 0xB9, 0xB7, 0x3A, 0xB9, 0xB1, 0xB2, 0xB9, 0x29, 0x81, 0x55, 0x89, 0x0C, 0xCF, 0x85, 0x2E, 0x0F, 0xAE, 0x2C, 0xC8, 0xCD, 0xED, 0x8D, 0x2E, 0x8C, 0x2E, 0xED, 0xCD, 0x6D, 0x6E, 0x8A, 0x90, 0x06, 0x6E, 0x50, 0x87, 0x0C, 0xCF, 0xA5, 0xCC, 0x8D, 0x4E, 0x2E, 0x0F, 0xEA, 0x2D, 0xCD, 0x8D, 0x6E, 0x6E, 0x4A, 0x20, 0x07, 0x5D, 0xC8, 0xF0, 0x5C, 0xC6, 0xDE, 0xEA, 0xDC, 0xE8, 0xCA, 0xE4, 0xE6, 0xA6, 0x04, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x9A, 0xBB, 0x9C, 0x95, 0xC7, 0x0F, 0xD7, 0x88, 0x7C, 0x0D, 0x55, 0x3C, 0xCD, 0xD7, 0xD7, 0x44, 0x58, 0x49, 0x4C, 0xF4, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0xBD, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xDC, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0xB4, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xC4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x11, 0x23, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xA4, 0x84, 0x04, 0x13, 0x23, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8C, 0x8C, 0x0B, 0x84, 0xC4, 0x4C, 0x10, 0x80, 0xC1, 0x08, 0x40, 0x09, 0x00, 0x0A, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0xC3, 0x30, 0x10, 0x51, 0x88, 0x61, 0x18, 0x06, 0x32, 0x66, 0x00, 0xCA, 0x80, 0x0C, 0x08, 0x25, 0x73, 0x04, 0x08, 0x2D, 0xF7, 0x0C, 0x97, 0x3F, 0x61, 0x0F, 0x21, 0xF9, 0x21, 0xD0, 0x0C, 0x0B, 0x81, 0x02, 0xA6, 0x2C, 0xC0, 0xD0, 0x0C, 0xC3, 0x80, 0x20, 0x08, 0xB2, 0x90, 0x73, 0xD4, 0x70, 0xF9, 0x13, 0xF6, 0x10, 0x92, 0xCF, 0x6D, 0x54, 0xB1, 0x12, 0x93, 0x5F, 0xDC, 0x36, 0x22, 0x10, 0x04, 0x41, 0x0A, 0x01, 0x0D, 0xCD, 0x40, 0xD1, 0x51, 0xC3, 0xE5, 0x4F, 0xD8, 0x43, 0x48, 0x3E, 0xB7, 0x51, 0xC5, 0x4A, 0x4C, 0x3E, 0x72, 0xDB, 0x88, 0x18, 0x86, 0x61, 0x28, 0xC4, 0x34, 0x34, 0x03, 0x51, 0x73, 0x04, 0x41, 0x31, 0x9A, 0x61, 0x19, 0x06, 0x8B, 0xAE, 0x81, 0x80, 0x61, 0x04, 0x02, 0x99, 0x89, 0x0C, 0xC6, 0x81, 0x1D, 0xC2, 0x61, 0x1E, 0xE6, 0xC1, 0x0D, 0x64, 0xE1, 0x16, 0x68, 0xA1, 0x1C, 0xF0, 0x81, 0x1E, 0xEA, 0x41, 0x1E, 0xCA, 0x41, 0x0E, 0x48, 0x81, 0x0F, 0xEC, 0xA1, 0x1C, 0xC6, 0x81, 0x1E, 0xDE, 0x41, 0x1E, 0xF8, 0xC0, 0x1C, 0xD8, 0xE1, 0x1D, 0xC2, 0x81, 0x1E, 0xD8, 0x00, 0x0C, 0xE8, 0xC0, 0x0F, 0xC0, 0xC0, 0x0F, 0x50, 0xA0, 0xD1, 0x76, 0xC1, 0x8F, 0x88, 0x61, 0x18, 0x10, 0xEA, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x4A, 0x60, 0x04, 0xA0, 0x1C, 0x8A, 0xA1, 0x08, 0x8A, 0xA3, 0x40, 0x0A, 0xA1, 0x20, 0xC8, 0x1A, 0x01, 0x20, 0x6E, 0x06, 0x80, 0xBC, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0x98, 0x20, 0x0C, 0xCA, 0x06, 0x61, 0x30, 0x28, 0x8C, 0xCD, 0x4D, 0x10, 0x86, 0x65, 0xC3, 0x80, 0x24, 0xC4, 0x04, 0x81, 0x93, 0x08, 0x4C, 0x10, 0x06, 0x66, 0x82, 0x60, 0x45, 0x13, 0x84, 0xA1, 0xD9, 0x20, 0x10, 0xCF, 0x86, 0x85, 0x58, 0x18, 0x82, 0x18, 0x1A, 0xC7, 0x71, 0xA0, 0x0D, 0x41, 0x34, 0x41, 0xF0, 0xA6, 0x09, 0xC2, 0xE0, 0x6C, 0x40, 0x88, 0x89, 0x21, 0x88, 0x81, 0x02, 0x36, 0x04, 0xD5, 0x06, 0x02, 0x90, 0x2C, 0x60, 0x82, 0x20, 0x00, 0x3C, 0x8A, 0xF0, 0xCA, 0xC6, 0xEA, 0xE8, 0xCA, 0x26, 0x08, 0xC3, 0x33, 0x41, 0x18, 0xA0, 0x0D, 0xC3, 0xB6, 0x0D, 0x1B, 0x04, 0x8D, 0xDB, 0x50, 0x60, 0x19, 0x70, 0x75, 0x55, 0xD8, 0xD8, 0xEC, 0xDA, 0x5C, 0xD2, 0xC8, 0xCA, 0xDC, 0xE8, 0xA6, 0x04, 0x41, 0x15, 0x32, 0x3C, 0x17, 0xBB, 0x32, 0xB9, 0xB9, 0xB4, 0x37, 0xB7, 0x29, 0x01, 0xD1, 0x84, 0x0C, 0xCF, 0xC5, 0x2E, 0x8C, 0xCD, 0xAE, 0x4C, 0x6E, 0x4A, 0x60, 0xD4, 0x21, 0xC3, 0x73, 0x99, 0x43, 0x0B, 0x23, 0x2B, 0x93, 0x6B, 0x7A, 0x23, 0x2B, 0x63, 0x9B, 0x12, 0x24, 0x65, 0xC8, 0xF0, 0x5C, 0xE4, 0xCA, 0xE6, 0xDE, 0xEA, 0xE4, 0xC6, 0xCA, 0xE6, 0xA6, 0x04, 0x56, 0x1D, 0x32, 0x3C, 0x97, 0x32, 0x37, 0x3A, 0xB9, 0x3C, 0xA8, 0xB7, 0x34, 0x37, 0xBA, 0xB9, 0x29, 0x41, 0x07, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x61, 0x20, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x13, 0x04, 0x44, 0x2C, 0x10, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x34, 0x94, 0x6E, 0x40, 0x61, 0x94, 0x5C, 0xD9, 0xD5, 0x40, 0x29, 0x95, 0x61, 0xC0, 0x0C, 0x00, 0x2D, 0xE5, 0x51, 0x04, 0x25, 0x40, 0xC8, 0x18, 0x01, 0x08, 0x82, 0x20, 0xFE, 0x8D, 0x11, 0x80, 0x20, 0x08, 0xA2, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xC1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xFC, 0x01, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x70, 0x71, 0x4D, 0xA1, 0x69, 0xD2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x5C, 0x9D, 0x73, 0x6C, 0xDB, 0x34, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x04, 0x19, 0x44, 0xDC, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x65, 0x20, 0x79, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0x85, 0x01, 0x34, 0x78, 0xA3, 0x09, 0x01, 0x30, 0xDC, 0x40, 0x04, 0x64, 0x30, 0xCB, 0x10, 0x0C, 0xC1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x69, 0x60, 0x79, 0xA3, 0x09, 0x44, 0x30, 0xDC, 0x60, 0x04, 0x64, 0x30, 0x9A, 0x60, 0x08, 0xC3, 0x0D, 0x44, 0x40, 0x06, 0x35, 0x04, 0x3A, 0xCB, 0x20, 0x0C, 0xC1, 0x2D, 0x48, 0xDD, 0x82, 0x54, 0x29, 0x1A, 0x14, 0xB2, 0xC1, 0x88, 0xC1, 0x01, 0x80, 0x20, 0x18, 0x18, 0x72, 0xB0, 0xB1, 0x81, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xC6, 0x1C, 0x70, 0x6D, 0x20, 0x9C, 0x80, 0xD8, 0x09, 0x88, 0x19, 0x22, 0xD0, 0xC7, 0x10, 0x81, 0x3E, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x10, 0xD5, 0xC1, 0x18, 0x58, 0x71, 0x30, 0x9A, 0x10, 0x0C, 0x16, 0x10, 0xF0, 0x31, 0x82, 0x83, 0x8F, 0x05, 0x03, 0x7C, 0xEC, 0xF8, 0xE0, 0x63, 0x41, 0x01, 0x9F, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xFC, 0x80, 0x0D, 0x8A, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xFE, 0xA0, 0x0D, 0x88, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0x40, 0xC1, 0x0D, 0x06, 0x1B, 0xC4, 0x40, 0x3E, 0x36, 0x8C, 0x81, 0x7C, 0x6C, 0x20, 0x03, 0xF9, 0xD8, 0x50, 0x06, 0xF0, 0xB1, 0xC1, 0x0C, 0xE0, 0x63, 0xC3, 0x19, 0xC0, 0x67, 0xC4, 0xC0, 0x01, 0x40, 0x10, 0x0C, 0x1C, 0x53, 0x80, 0x83, 0x33, 0x28, 0x03, 0x32, 0x78, 0x83, 0x41, 0x08, 0xD6, 0xC0, 0x0D, 0x66, 0x09, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00];

                    /// <inheritdoc/>
                    public override unsafe Span<byte> GetSpan()
                    {
                        return new(Unsafe.AsPointer(ref MemoryMarshal.GetReference(Data)), Data.Length);
                    }

                    /// <inheritdoc/>
                    public override Memory<byte> Memory
                    {
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        get => CreateMemory(Data.Length);
                    }

                    /// <inheritdoc/>
                    public override unsafe MemoryHandle Pin(int elementIndex)
                    {
                        return new(Unsafe.AsPointer(ref Unsafe.AsRef(in Data[elementIndex])), pinnable: this);
                    }

                    /// <inheritdoc/>
                    public override void Unpin()
                    {
                    }

                    /// <inheritdoc/>
                    protected override void Dispose(bool disposing)
                    {
                    }
                }
            }
            """";

        await VerifyGeneratedDiagnosticsAsync(source, ("MyNamespace.MyShader.g.cs", result));
    }

    [TestMethod]
    public async Task SimpleShader_PixelShader()
    {
        const string source = """
            using ComputeSharp;
            using float2 = global::ComputeSharp.Float2;
            using float3 = global::ComputeSharp.Float3;
            using float4 = global::ComputeSharp.Float4;

            namespace MyNamespace;

            [ThreadGroupSize(DefaultThreadGroupSizes.XY)]
            [GeneratedComputeShaderDescriptor]
            internal readonly partial struct MyShader : IComputeShader<float4>
            {
                private readonly float time;

                public float4 Execute()
                {
                    float2 uv = ThreadIds.Normalized.XY;
                    float3 col = 0.5f + 0.5f * Hlsl.Cos(time + new float3(uv, uv.X) + new float3(0, 2, 4));
                    return new(col, 1f);
                }
            }
            """;

        const string result = """"
            // <auto-generated/>
            #pragma warning disable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyShader"/>
                partial struct MyShader : global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>
                {
                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsX => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsY => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsZ => 1;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ConstantBufferSize => 12;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static bool global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.IsStaticSamplerRequired => false;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<global::ComputeSharp.Interop.ResourceDescriptorRange> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ResourceDescriptorRanges => global::ComputeSharp.Generated.Data.ResourceDescriptorRanges;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static string global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslSource =>
                        """
                        #define __GroupSize__get_X 8
                        #define __GroupSize__get_Y 8
                        #define __GroupSize__get_Z 1

                        cbuffer _ : register(b0)
                        {
                            uint __x;
                            uint __y;
                            float time;
                        }

                        RWTexture2D<unorm float4> __outputTexture : register(u0);

                        [NumThreads(__GroupSize__get_X, __GroupSize__get_Y, __GroupSize__get_Z)]
                        void Execute(uint3 ThreadIds : SV_DispatchThreadID)
                        {
                            if (ThreadIds.x < __x && ThreadIds.y < __y)
                            {
                                float2 uv = float2(ThreadIds.x, ThreadIds.y) / float2(max(1, int2(__x, __y) - 1));
                                float3 col = 0.5 + 0.5 * cos(time + float3(uv, uv.x) + float3(0, 2, 4));
                                {
                                    __outputTexture[ThreadIds.xy] = float4(col, 1.0);
                                    return;
                                }
                            }
                        }
                        """;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<byte> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslBytecode => global::ComputeSharp.Generated.HlslBytecodeMemoryManager.Instance.Memory;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    [global::System.Runtime.CompilerServices.SkipLocalsInit]
                    static unsafe void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadConstantBuffer<TLoader>(in MyShader shader, ref TLoader loader, int x, int y, int z)
                    {
                        global::ComputeSharp.Generated.ConstantBufferMarshaller.FromManaged(in shader, out global::ComputeSharp.Generated.ConstantBuffer buffer);

                        buffer.__x = x;
                        buffer.__y = y;

                        loader.LoadConstantBuffer(new global::System.ReadOnlySpan<byte>(&buffer, sizeof(global::ComputeSharp.Generated.ConstantBuffer)));
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadGraphicsResources<TLoader>(in MyShader shader, ref TLoader loader)
                    {
                    }
                }
            }

            namespace ComputeSharp.Generated
            {
                using global::System;
                using global::System.Buffers;
                using global::System.CodeDom.Compiler;
                using global::System.Diagnostics;
                using global::System.Diagnostics.CodeAnalysis;
                using global::System.Runtime.CompilerServices;
                using global::System.Runtime.InteropServices;
                using global::ComputeSharp.Interop;

                /// <summary>
                /// A type representing the constant buffer native layout for <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                file struct ConstantBuffer
                {
                    /// <summary>The artificial field backing <see cref="DispatchSize.X"/>.</summary>
                    [FieldOffset(0)]
                    public int __x;

                    /// <summary>The artificial field backing <see cref="DispatchSize.Y"/>.</summary>
                    [FieldOffset(4)]
                    public int __y;

                    /// <inheritdoc cref="global::MyNamespace.MyShader.time"/>
                    [FieldOffset(8)]
                    public float time;
                }

                /// <summary>
                /// A type containing marshalling logic for the constant buffer in shaders of type <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class ConstantBufferMarshaller
                {
                    /// <summary>
                    /// Marshals managed <see cref="global::MyNamespace.MyShader"/> instances to native constant buffer data.
                    /// </summary>
                    /// <param name="buffer">The input native constant buffer.</param>
                    /// <returns>The marshalled <see cref="global::MyNamespace.MyShader"/> instance.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    [SkipLocalsInit]
                    public static void FromManaged(in global::MyNamespace.MyShader shader, out ConstantBuffer buffer)
                    {
                        Unsafe.SkipInit(out buffer.__x);
                        Unsafe.SkipInit(out buffer.__y);

                        buffer.time = shader.time();
                    }

                    /// <inheritdoc cref="global::MyNamespace.MyShader.time"/>
                    /// <param name="value">The input <see cref="global::MyNamespace.MyShader"/> value.</param>
                    /// <returns>A mutable reference to <see cref="global::MyNamespace.MyShader.time"/>.</returns>
                    [UnsafeAccessor(UnsafeAccessorKind.Field)]
                    private static extern ref readonly float time(this ref readonly global::MyNamespace.MyShader value);
                }

                /// <summary>
                /// A container type for additional data needed by the shader.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class Data
                {
                    /// <summary>The singleton <see cref="ResourceDescriptorRange"/> array instance.</summary>
                    public static readonly ResourceDescriptorRange[] ResourceDescriptorRanges =
                    [
                        new ResourceDescriptorRange(ResourceDescriptorRangeType.UnorderedAccessView, 0)
                    ];
                }

                /// <summary>
                /// <see cref="MemoryManager{T}"/> implementation to get the HLSL bytecode.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file sealed class HlslBytecodeMemoryManager : MemoryManager<byte>
                {
                    /// <summary>The singleton <see cref="HlslBytecodeMemoryManager"/> instance to use.</summary>
                    public static readonly HlslBytecodeMemoryManager Instance = new();

                    /// <summary>The RVA data with the HLSL bytecode.</summary>
                    private static ReadOnlySpan<byte> Data => [0x44, 0x58, 0x42, 0x43, 0xE2, 0xA1, 0x14, 0x53, 0xC8, 0x8F, 0xCF, 0x58, 0x57, 0x3E, 0x4A, 0xC2, 0x7F, 0xDD, 0xFE, 0x93, 0x01, 0x00, 0x00, 0x00, 0x60, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x64, 0x07, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4F, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x78, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54, 0x70, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0x9C, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x58, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xA4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x52, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x91, 0x22, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xA4, 0x84, 0x04, 0x93, 0x22, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8A, 0x8C, 0x0B, 0x84, 0xA4, 0x4C, 0x10, 0x7C, 0x23, 0x00, 0x25, 0x00, 0x14, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0x63, 0x0C, 0x22, 0x85, 0x18, 0x63, 0x0C, 0x32, 0x33, 0x00, 0x65, 0x40, 0x03, 0x51, 0x9A, 0x23, 0x40, 0x68, 0xDD, 0x33, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x87, 0x40, 0x33, 0x2C, 0x04, 0x0A, 0x58, 0x59, 0xC0, 0x68, 0x63, 0x0C, 0x84, 0x10, 0x5A, 0xE4, 0x8E, 0x1A, 0x2E, 0x7F, 0xC2, 0x1E, 0x42, 0xF2, 0xB9, 0x8D, 0x2A, 0x56, 0x62, 0xF2, 0x8B, 0xDB, 0x46, 0x04, 0x42, 0x08, 0x15, 0x02, 0x8E, 0x36, 0x28, 0x1E, 0x35, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x73, 0x1B, 0x55, 0xAC, 0xC4, 0xE4, 0x23, 0xB7, 0x8D, 0x88, 0x31, 0xC6, 0x28, 0xC4, 0x1C, 0x6D, 0x10, 0x9D, 0x23, 0x08, 0x8A, 0xD1, 0xC6, 0x1A, 0xC3, 0xD2, 0x1D, 0x08, 0x18, 0x46, 0x20, 0x90, 0x99, 0xC8, 0x60, 0x1C, 0xD8, 0x21, 0x1C, 0xE6, 0x61, 0x1E, 0xDC, 0x40, 0x16, 0x6E, 0x81, 0x16, 0xCA, 0x01, 0x1F, 0xE8, 0xA1, 0x1E, 0xE4, 0xA1, 0x1C, 0xE4, 0x80, 0x14, 0xF8, 0xC0, 0x1E, 0xCA, 0x61, 0x1C, 0xE8, 0xE1, 0x1D, 0xE4, 0x81, 0x0F, 0xCC, 0x81, 0x1D, 0xDE, 0x21, 0x1C, 0xE8, 0x81, 0x0D, 0xC0, 0x80, 0x0E, 0xFC, 0x00, 0x0C, 0xFC, 0x00, 0x05, 0x9A, 0xF6, 0x05, 0x3F, 0x1A, 0xC6, 0x40, 0xD4, 0x01, 0x00, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x25, 0x30, 0x02, 0x50, 0x0C, 0x45, 0x50, 0x1C, 0x85, 0x51, 0x06, 0xE5, 0x50, 0x0A, 0x25, 0x51, 0x08, 0x05, 0x51, 0x28, 0x05, 0x45, 0x76, 0x04, 0xA0, 0x06, 0x88, 0xCF, 0x00, 0x50, 0x9F, 0x01, 0x20, 0x3F, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0xD8, 0x20, 0x10, 0x04, 0x85, 0xB1, 0xB9, 0x09, 0xC2, 0xA0, 0x6C, 0x18, 0x0E, 0x84, 0x98, 0x20, 0x70, 0x18, 0x9F, 0xAF, 0xAF, 0xB7, 0x3A, 0x3A, 0xB8, 0x3A, 0x3A, 0xAA, 0x32, 0x3C, 0xBA, 0x3A, 0xB9, 0xB2, 0x09, 0xC2, 0xB0, 0x4C, 0x10, 0x2C, 0x6B, 0x82, 0x30, 0x30, 0x1B, 0x04, 0xC2, 0xD9, 0xB0, 0x10, 0xCA, 0x42, 0x10, 0x03, 0xD3, 0x34, 0xCD, 0xB3, 0x21, 0x80, 0x26, 0x08, 0x9E, 0xC6, 0xE0, 0x6B, 0x82, 0x30, 0x34, 0x1B, 0x10, 0x42, 0x9A, 0x08, 0x62, 0xA0, 0x80, 0x0D, 0x41, 0xB5, 0x81, 0x00, 0x22, 0x0B, 0x98, 0x20, 0x74, 0x19, 0x87, 0xAF, 0x2F, 0xBC, 0x09, 0xC2, 0xE0, 0x4C, 0x10, 0x86, 0x67, 0x82, 0x30, 0x40, 0x13, 0x84, 0x21, 0x9A, 0x20, 0x58, 0xD7, 0x06, 0x04, 0xC9, 0x34, 0x62, 0xE3, 0x3A, 0x8F, 0xC3, 0xD7, 0x57, 0xDE, 0x04, 0x61, 0x90, 0x36, 0x20, 0x08, 0x18, 0x68, 0x61, 0xB0, 0x71, 0x9D, 0x47, 0x82, 0x2E, 0xAD, 0xAD, 0x6C, 0x82, 0x30, 0x4C, 0x1B, 0x10, 0x64, 0x0C, 0x34, 0x32, 0xD8, 0xBA, 0xCE, 0xDB, 0x40, 0x50, 0x9F, 0x18, 0x94, 0xC1, 0x86, 0x81, 0xC0, 0xCC, 0x60, 0x82, 0x20, 0x00, 0x1B, 0x80, 0x0D, 0x03, 0x91, 0x06, 0x69, 0xB0, 0x21, 0x50, 0x83, 0x0D, 0xC3, 0x80, 0x06, 0x6B, 0xC0, 0xA3, 0x08, 0xAF, 0x6C, 0xAC, 0x8E, 0xAE, 0x6C, 0xC3, 0x40, 0x06, 0x64, 0x30, 0x6C, 0x10, 0xC2, 0xC0, 0x0D, 0x36, 0x14, 0x68, 0xD0, 0x06, 0xC0, 0xF5, 0x06, 0x44, 0xC4, 0xE4, 0xC2, 0xDC, 0xC6, 0xD0, 0xCA, 0xE6, 0x68, 0x98, 0xB1, 0xBD, 0x85, 0xD1, 0xCD, 0x4D, 0x10, 0x06, 0x8A, 0x45, 0x9A, 0xDB, 0x1C, 0xDD, 0xDC, 0x04, 0x61, 0xA8, 0x48, 0xA4, 0xB9, 0xD1, 0xCD, 0x31, 0xA1, 0x2B, 0xC3, 0xFB, 0x9A, 0xA3, 0x7B, 0x93, 0x2B, 0xDB, 0xA0, 0xC4, 0x01, 0x23, 0x07, 0x73, 0x40, 0x07, 0x75, 0x60, 0x07, 0xC8, 0x1D, 0x0C, 0x55, 0xD8, 0xD8, 0xEC, 0xDA, 0x5C, 0xD2, 0xC8, 0xCA, 0xDC, 0xE8, 0xA6, 0x04, 0x41, 0x15, 0x32, 0x3C, 0x17, 0xBB, 0x32, 0xB9, 0xB9, 0xB4, 0x37, 0xB7, 0x29, 0x01, 0xD1, 0x84, 0x0C, 0xCF, 0xC5, 0x2E, 0x8C, 0xCD, 0xAE, 0x4C, 0x6E, 0x4A, 0x50, 0xD4, 0x21, 0xC3, 0x73, 0x99, 0x43, 0x0B, 0x23, 0x2B, 0x93, 0x6B, 0x7A, 0x23, 0x2B, 0x63, 0x9B, 0x12, 0x20, 0x65, 0xC8, 0xF0, 0x5C, 0xE4, 0xCA, 0xE6, 0xDE, 0xEA, 0xE4, 0xC6, 0xCA, 0xE6, 0xA6, 0x04, 0x56, 0x25, 0x32, 0x3C, 0x17, 0xBA, 0x3C, 0xB8, 0xB2, 0x20, 0x37, 0xB7, 0x37, 0xBA, 0x30, 0xBA, 0xB4, 0x37, 0xB7, 0xB9, 0x29, 0x82, 0x19, 0xAC, 0x41, 0x1D, 0x32, 0x3C, 0x97, 0x32, 0x37, 0x3A, 0xB9, 0x3C, 0xA8, 0xB7, 0x34, 0x37, 0xBA, 0xB9, 0x29, 0xC1, 0x1B, 0x74, 0x21, 0xC3, 0x73, 0x19, 0x7B, 0xAB, 0x73, 0xA3, 0x2B, 0x93, 0x9B, 0x9B, 0x12, 0xDC, 0x01, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x8A, 0x75, 0x04, 0xCE, 0xC4, 0x7A, 0xCC, 0x9C, 0x18, 0xDE, 0xC3, 0x39, 0xA8, 0x69, 0xEB, 0x44, 0x58, 0x49, 0x4C, 0xD8, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0xB6, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0xAD, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xC4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x11, 0x23, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xA4, 0x84, 0x04, 0x13, 0x23, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8C, 0x8C, 0x0B, 0x84, 0xC4, 0x4C, 0x10, 0x80, 0xC1, 0x08, 0x40, 0x09, 0x00, 0x0A, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0xC3, 0x30, 0x10, 0x51, 0x88, 0x61, 0x18, 0x06, 0x32, 0x66, 0x00, 0xCA, 0x80, 0x0C, 0x08, 0x25, 0x73, 0x04, 0x08, 0x2D, 0xF7, 0x0C, 0x97, 0x3F, 0x61, 0x0F, 0x21, 0xF9, 0x21, 0xD0, 0x0C, 0x0B, 0x81, 0x02, 0xA6, 0x2C, 0xC0, 0xD0, 0x0C, 0xC3, 0x80, 0x20, 0x08, 0xB2, 0x90, 0x73, 0xD4, 0x70, 0xF9, 0x13, 0xF6, 0x10, 0x92, 0xCF, 0x6D, 0x54, 0xB1, 0x12, 0x93, 0x5F, 0xDC, 0x36, 0x22, 0x10, 0x04, 0x41, 0x0A, 0x01, 0x0D, 0xCD, 0x40, 0xD1, 0x51, 0xC3, 0xE5, 0x4F, 0xD8, 0x43, 0x48, 0x3E, 0xB7, 0x51, 0xC5, 0x4A, 0x4C, 0x3E, 0x72, 0xDB, 0x88, 0x18, 0x86, 0x61, 0x28, 0xC4, 0x34, 0x34, 0x03, 0x51, 0x73, 0x04, 0x41, 0x31, 0x9A, 0x61, 0x19, 0x06, 0x8B, 0xAE, 0x81, 0x80, 0x61, 0x04, 0x02, 0x99, 0x89, 0x0C, 0xC6, 0x81, 0x1D, 0xC2, 0x61, 0x1E, 0xE6, 0xC1, 0x0D, 0x64, 0xE1, 0x16, 0x68, 0xA1, 0x1C, 0xF0, 0x81, 0x1E, 0xEA, 0x41, 0x1E, 0xCA, 0x41, 0x0E, 0x48, 0x81, 0x0F, 0xEC, 0xA1, 0x1C, 0xC6, 0x81, 0x1E, 0xDE, 0x41, 0x1E, 0xF8, 0xC0, 0x1C, 0xD8, 0xE1, 0x1D, 0xC2, 0x81, 0x1E, 0xD8, 0x00, 0x0C, 0xE8, 0xC0, 0x0F, 0xC0, 0xC0, 0x0F, 0x50, 0xA0, 0xD1, 0x76, 0xC1, 0x8F, 0x86, 0x61, 0x40, 0xA8, 0x9B, 0x02, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x4A, 0x60, 0x04, 0xA0, 0x1C, 0x8A, 0xA1, 0x08, 0x8A, 0xA3, 0x30, 0x0A, 0xA1, 0x20, 0xC8, 0x1A, 0x01, 0x20, 0x6E, 0x06, 0x80, 0xBC, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0x98, 0x20, 0x0C, 0xCA, 0x06, 0x61, 0x30, 0x28, 0x8C, 0xCD, 0x4D, 0x10, 0x86, 0x65, 0xC3, 0x80, 0x24, 0xC4, 0x04, 0x81, 0x93, 0x08, 0x4C, 0x10, 0x06, 0x66, 0x82, 0x60, 0x45, 0x13, 0x84, 0xA1, 0xD9, 0x20, 0x10, 0xCF, 0x86, 0x85, 0x58, 0x18, 0x82, 0x18, 0x1A, 0xC7, 0x71, 0xA0, 0x0D, 0x41, 0x34, 0x41, 0xF0, 0xA6, 0x09, 0xC2, 0xE0, 0x6C, 0x40, 0x88, 0x89, 0x21, 0x88, 0x81, 0x02, 0x36, 0x04, 0xD5, 0x06, 0x02, 0x90, 0x2C, 0x60, 0x82, 0x20, 0x00, 0x3C, 0x8A, 0xF0, 0xCA, 0xC6, 0xEA, 0xE8, 0xCA, 0x26, 0x08, 0xC3, 0x33, 0x41, 0x18, 0xA0, 0x0D, 0xC3, 0xB6, 0x0D, 0x1B, 0x04, 0x8D, 0xDB, 0x50, 0x60, 0x19, 0x70, 0x75, 0x55, 0xD8, 0xD8, 0xEC, 0xDA, 0x5C, 0xD2, 0xC8, 0xCA, 0xDC, 0xE8, 0xA6, 0x04, 0x41, 0x15, 0x32, 0x3C, 0x17, 0xBB, 0x32, 0xB9, 0xB9, 0xB4, 0x37, 0xB7, 0x29, 0x01, 0xD1, 0x84, 0x0C, 0xCF, 0xC5, 0x2E, 0x8C, 0xCD, 0xAE, 0x4C, 0x6E, 0x4A, 0x60, 0xD4, 0x21, 0xC3, 0x73, 0x99, 0x43, 0x0B, 0x23, 0x2B, 0x93, 0x6B, 0x7A, 0x23, 0x2B, 0x63, 0x9B, 0x12, 0x24, 0x65, 0xC8, 0xF0, 0x5C, 0xE4, 0xCA, 0xE6, 0xDE, 0xEA, 0xE4, 0xC6, 0xCA, 0xE6, 0xA6, 0x04, 0x56, 0x1D, 0x32, 0x3C, 0x97, 0x32, 0x37, 0x3A, 0xB9, 0x3C, 0xA8, 0xB7, 0x34, 0x37, 0xBA, 0xB9, 0x29, 0x41, 0x07, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x61, 0x20, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x13, 0x04, 0x44, 0x2C, 0x10, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x34, 0x94, 0x5C, 0xE9, 0x06, 0x94, 0x5D, 0x0D, 0x94, 0x52, 0x19, 0x06, 0xCC, 0x00, 0xD0, 0x52, 0x1E, 0x45, 0x50, 0x02, 0x84, 0x8C, 0x11, 0x80, 0x20, 0x08, 0xE2, 0xDF, 0x18, 0x01, 0x08, 0x82, 0x20, 0x0A, 0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x18, 0x8C, 0x11, 0x80, 0x20, 0x08, 0xC2, 0x1F, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x70, 0x6D, 0x4E, 0x91, 0x65, 0xD1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x5C, 0xDC, 0x73, 0x68, 0x9A, 0x34, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xC4, 0x18, 0x3C, 0xDB, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x64, 0x00, 0x75, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0x81, 0x01, 0x34, 0x74, 0xA3, 0x09, 0x01, 0x30, 0xDC, 0x40, 0x04, 0x64, 0x30, 0xCB, 0x10, 0x0C, 0xC1, 0x68, 0xC2, 0x10, 0x0C, 0x37, 0x14, 0x01, 0x19, 0xCC, 0x32, 0x08, 0x43, 0x70, 0x07, 0x52, 0x77, 0x20, 0x55, 0x86, 0x05, 0x55, 0x5C, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1B, 0x5C, 0x67, 0x20, 0x8C, 0x18, 0x1C, 0x00, 0x08, 0x82, 0x81, 0xE1, 0x06, 0x18, 0x1A, 0x08, 0x27, 0x20, 0x76, 0x02, 0x62, 0x86, 0x08, 0xF4, 0x31, 0x44, 0xA0, 0xCF, 0x88, 0xC1, 0x01, 0x80, 0x20, 0x18, 0x44, 0x70, 0xF0, 0x49, 0x6C, 0x30, 0x9A, 0x10, 0x08, 0x16, 0x10, 0xF0, 0x31, 0x02, 0x83, 0x8F, 0x05, 0x03, 0x7C, 0xEC, 0xD8, 0xE0, 0x63, 0x41, 0x01, 0x9F, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xF2, 0xC0, 0x0D, 0x8A, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xF4, 0xE0, 0x0D, 0x88, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xF6, 0x00, 0x0E, 0x06, 0x1B, 0x3C, 0xF9, 0xD8, 0xF0, 0xC9, 0xC7, 0x06, 0x30, 0x90, 0x8F, 0x0D, 0x61, 0x00, 0x1F, 0x1B, 0xC4, 0x00, 0x3E, 0x36, 0x8C, 0x01, 0x7C, 0x46, 0x0C, 0x1C, 0x00, 0x04, 0xC1, 0xC0, 0x09, 0x05, 0x36, 0x18, 0x83, 0x30, 0x00, 0x83, 0x35, 0x18, 0x84, 0xE0, 0x0C, 0xD4, 0x60, 0x96, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00];

                    /// <inheritdoc/>
                    public override unsafe Span<byte> GetSpan()
                    {
                        return new(Unsafe.AsPointer(ref MemoryMarshal.GetReference(Data)), Data.Length);
                    }

                    /// <inheritdoc/>
                    public override Memory<byte> Memory
                    {
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        get => CreateMemory(Data.Length);
                    }

                    /// <inheritdoc/>
                    public override unsafe MemoryHandle Pin(int elementIndex)
                    {
                        return new(Unsafe.AsPointer(ref Unsafe.AsRef(in Data[elementIndex])), pinnable: this);
                    }

                    /// <inheritdoc/>
                    public override void Unpin()
                    {
                    }

                    /// <inheritdoc/>
                    protected override void Dispose(bool disposing)
                    {
                    }
                }
            }
            """";

        await VerifyGeneratedDiagnosticsAsync(source, ("MyNamespace.MyShader.g.cs", result));
    }

    [TestMethod]
    public async Task SimpleShader_WithPrimaryConstructorParameters()
    {
        const string source = """
            using ComputeSharp;
            using float2 = global::ComputeSharp.Float2;
            using float3 = global::ComputeSharp.Float3;
            using float4 = global::ComputeSharp.Float4;

            namespace MyNamespace;

            [ThreadGroupSize(DefaultThreadGroupSizes.XY)]
            [GeneratedComputeShaderDescriptor]
            internal readonly partial struct MyShader(
                IReadWriteNormalizedTexture2D<float4> texture,
                float time) : IComputeShader
            {
                public void Execute()
                {
                    float2 uv = ThreadIds.Normalized.XY;
                    float3 col = 0.5f + 0.5f * Hlsl.Cos(time + new float3(uv, uv.X) + new float3(0, 2, 4));
                    texture[ThreadIds.XY] = new float4(col, 1f);
                }
            }
            """;

        const string result = """"
            // <auto-generated/>
            #pragma warning disable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyShader"/>
                partial struct MyShader : global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>
                {
                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsX => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsY => 8;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ThreadsZ => 1;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static int global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ConstantBufferSize => 16;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static bool global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.IsStaticSamplerRequired => false;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<global::ComputeSharp.Interop.ResourceDescriptorRange> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.ResourceDescriptorRanges => global::ComputeSharp.Generated.Data.ResourceDescriptorRanges;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static string global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslSource =>
                        """
                        #define __GroupSize__get_X 8
                        #define __GroupSize__get_Y 8
                        #define __GroupSize__get_Z 1

                        cbuffer _ : register(b0)
                        {
                            uint __x;
                            uint __y;
                            uint __z;
                            float time;
                        }

                        RWTexture2D<unorm float4> __reserved__texture : register(u0);

                        [NumThreads(__GroupSize__get_X, __GroupSize__get_Y, __GroupSize__get_Z)]
                        void Execute(uint3 ThreadIds : SV_DispatchThreadID)
                        {
                            if (ThreadIds.x < __x && ThreadIds.y < __y && ThreadIds.z < __z)
                            {
                                float2 uv = float2(ThreadIds.x, ThreadIds.y) / float2(max(1, int2(__x, __y) - 1));
                                float3 col = 0.5 + 0.5 * cos(time + float3(uv, uv.x) + float3(0, 2, 4));
                                __reserved__texture[ThreadIds.xy] = float4(col, 1.0);
                            }
                        }
                        """;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static global::System.ReadOnlyMemory<byte> global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.HlslBytecode => global::ComputeSharp.Generated.HlslBytecodeMemoryManager.Instance.Memory;

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    [global::System.Runtime.CompilerServices.SkipLocalsInit]
                    static unsafe void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadConstantBuffer<TLoader>(in MyShader shader, ref TLoader loader, int x, int y, int z)
                    {
                        global::ComputeSharp.Generated.ConstantBufferMarshaller.FromManaged(in shader, out global::ComputeSharp.Generated.ConstantBuffer buffer);

                        buffer.__x = x;
                        buffer.__y = y;
                        buffer.__z = z;

                        loader.LoadConstantBuffer(new global::System.ReadOnlySpan<byte>(&buffer, sizeof(global::ComputeSharp.Generated.ConstantBuffer)));
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    static void global::ComputeSharp.Descriptors.IComputeShaderDescriptor<MyShader>.LoadGraphicsResources<TLoader>(in MyShader shader, ref TLoader loader)
                    {
                        global::ComputeSharp.Generated.GraphicsResourcesLoader.LoadGraphicsResources(in shader, ref loader);
                    }
                }
            }

            namespace ComputeSharp.Generated
            {
                using global::System;
                using global::System.Buffers;
                using global::System.CodeDom.Compiler;
                using global::System.Diagnostics;
                using global::System.Diagnostics.CodeAnalysis;
                using global::System.Runtime.CompilerServices;
                using global::System.Runtime.InteropServices;
                using global::ComputeSharp.Descriptors;
                using global::ComputeSharp.Interop;

                /// <summary>
                /// A type representing the constant buffer native layout for <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                file struct ConstantBuffer
                {
                    /// <summary>The artificial field backing <see cref="DispatchSize.X"/>.</summary>
                    [FieldOffset(0)]
                    public int __x;

                    /// <summary>The artificial field backing <see cref="DispatchSize.Y"/>.</summary>
                    [FieldOffset(4)]
                    public int __y;

                    /// <summary>The artificial field backing <see cref="DispatchSize.Z"/>.</summary>
                    [FieldOffset(8)]
                    public int __z;

                    /// <summary>The unspeakable field "time" of <see cref="global::MyNamespace.MyShader"/>.</summary>
                    [FieldOffset(12)]
                    public float time;
                }

                /// <summary>
                /// A type containing marshalling logic for the constant buffer in shaders of type <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class ConstantBufferMarshaller
                {
                    /// <summary>
                    /// Marshals managed <see cref="global::MyNamespace.MyShader"/> instances to native constant buffer data.
                    /// </summary>
                    /// <param name="buffer">The input native constant buffer.</param>
                    /// <returns>The marshalled <see cref="global::MyNamespace.MyShader"/> instance.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    [SkipLocalsInit]
                    public static void FromManaged(in global::MyNamespace.MyShader shader, out ConstantBuffer buffer)
                    {
                        Unsafe.SkipInit(out buffer.__x);
                        Unsafe.SkipInit(out buffer.__y);
                        Unsafe.SkipInit(out buffer.__z);

                        buffer.time = shader.time();
                    }

                    /// <summary>Gets a reference to the unspeakable field "time" of type <see cref="global::MyNamespace.MyShader"/>.</summary>
                    /// <param name="value">The input <see cref="global::MyNamespace.MyShader"/> value.</param>
                    /// <returns>A mutable reference to the unspeakable field "time".</returns>
                    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<time>P")]
                    private static extern ref readonly float time(this ref readonly global::MyNamespace.MyShader value);
                }

                /// <summary>
                /// A type containing loading logic for graphics resources in shaders of type <see cref="global::MyNamespace.MyShader"/>.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class GraphicsResourcesLoader
                {
                    /// <inheritdoc cref="IComputeShaderDescriptor{T}.LoadGraphicsResources"/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static void LoadGraphicsResources<TLoader>(in global::MyNamespace.MyShader shader, ref TLoader loader)
                        where TLoader : struct, IGraphicsResourceLoader
                    {
                        loader.LoadGraphicsResource(shader.texture(), 0);
                    }

                    /// <summary>Gets a reference to the unspeakable field "texture" of type <see cref="global::MyNamespace.MyShader"/>.</summary>
                    /// <param name="value">The input <see cref="global::MyNamespace.MyShader"/> value.</param>
                    /// <returns>A reference to the unspeakable field "texture".</returns>
                    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<texture>P")]
                    private static extern ref readonly IReadWriteNormalizedTexture2D<float4> texture(this ref readonly global::MyNamespace.MyShader value);
                }

                /// <summary>
                /// A container type for additional data needed by the shader.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file static class Data
                {
                    /// <summary>The singleton <see cref="ResourceDescriptorRange"/> array instance.</summary>
                    public static readonly ResourceDescriptorRange[] ResourceDescriptorRanges =
                    [
                        new ResourceDescriptorRange(ResourceDescriptorRangeType.UnorderedAccessView, 0)
                    ];
                }

                /// <summary>
                /// <see cref="MemoryManager{T}"/> implementation to get the HLSL bytecode.
                /// </summary>
                [GeneratedCode("ComputeSharp.ComputeShaderDescriptorGenerator", <ASSEMBLY_VERSION>)]
                [DebuggerNonUserCode]
                [ExcludeFromCodeCoverage]
                file sealed class HlslBytecodeMemoryManager : MemoryManager<byte>
                {
                    /// <summary>The singleton <see cref="HlslBytecodeMemoryManager"/> instance to use.</summary>
                    public static readonly HlslBytecodeMemoryManager Instance = new();

                    /// <summary>The RVA data with the HLSL bytecode.</summary>
                    private static ReadOnlySpan<byte> Data => [0x44, 0x58, 0x42, 0x43, 0x85, 0xAB, 0x89, 0xA8, 0x68, 0x86, 0x6C, 0x2B, 0x90, 0xB8, 0x38, 0x75, 0x15, 0x08, 0xEE, 0x86, 0x01, 0x00, 0x00, 0x00, 0xA0, 0x0E, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0xEC, 0x00, 0x00, 0x00, 0x88, 0x07, 0x00, 0x00, 0xA4, 0x07, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4F, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x78, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54, 0x94, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0xA5, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7C, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0x9C, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xA4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x52, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x91, 0x22, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xA4, 0x84, 0x04, 0x93, 0x22, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8A, 0x8C, 0x0B, 0x84, 0xA4, 0x4C, 0x10, 0x7C, 0x23, 0x00, 0x25, 0x00, 0x14, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0x63, 0x0C, 0x22, 0x85, 0x18, 0x63, 0x0C, 0x32, 0x33, 0x00, 0x65, 0x40, 0x03, 0x51, 0x9A, 0x23, 0x40, 0x68, 0xDD, 0x33, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x87, 0x40, 0x33, 0x2C, 0x04, 0x0A, 0x58, 0x59, 0xC0, 0x68, 0x63, 0x0C, 0x84, 0x10, 0x5A, 0xE4, 0x8E, 0x1A, 0x2E, 0x7F, 0xC2, 0x1E, 0x42, 0xF2, 0xB9, 0x8D, 0x2A, 0x56, 0x62, 0xF2, 0x8B, 0xDB, 0x46, 0x04, 0x42, 0x08, 0x15, 0x02, 0x8E, 0x36, 0x28, 0x1E, 0x35, 0x5C, 0xFE, 0x84, 0x3D, 0x84, 0xE4, 0x73, 0x1B, 0x55, 0xAC, 0xC4, 0xE4, 0x23, 0xB7, 0x8D, 0x88, 0x31, 0xC6, 0x28, 0xC4, 0x1C, 0x6D, 0x10, 0x9D, 0x23, 0x08, 0x8A, 0xD1, 0xC6, 0x1A, 0xC3, 0xD2, 0x1D, 0x08, 0x18, 0x46, 0x20, 0x90, 0x99, 0xC8, 0x60, 0x1C, 0xD8, 0x21, 0x1C, 0xE6, 0x61, 0x1E, 0xDC, 0x40, 0x16, 0x6E, 0x81, 0x16, 0xCA, 0x01, 0x1F, 0xE8, 0xA1, 0x1E, 0xE4, 0xA1, 0x1C, 0xE4, 0x80, 0x14, 0xF8, 0xC0, 0x1E, 0xCA, 0x61, 0x1C, 0xE8, 0xE1, 0x1D, 0xE4, 0x81, 0x0F, 0xCC, 0x81, 0x1D, 0xDE, 0x21, 0x1C, 0xE8, 0x81, 0x0D, 0xC0, 0x80, 0x0E, 0xFC, 0x00, 0x0C, 0xFC, 0x00, 0x05, 0x9A, 0xF6, 0x05, 0x3F, 0x22, 0xC6, 0x18, 0x88, 0x3A, 0x00, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x25, 0x30, 0x02, 0x50, 0x0C, 0x45, 0x50, 0x1C, 0x05, 0x52, 0x06, 0xE5, 0x50, 0x0A, 0x25, 0x51, 0x08, 0x05, 0x51, 0x18, 0x85, 0x52, 0x58, 0x64, 0x47, 0x00, 0x6A, 0x80, 0xF8, 0x0C, 0x00, 0xF5, 0x19, 0x00, 0xF2, 0x33, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0xD8, 0x20, 0x10, 0x04, 0x85, 0xB1, 0xB9, 0x09, 0xC2, 0xA0, 0x6C, 0x18, 0x0E, 0x84, 0x98, 0x20, 0x70, 0x19, 0xA7, 0xAF, 0x2F, 0xB9, 0xB2, 0xB9, 0x32, 0x39, 0xBB, 0x32, 0xB2, 0xAF, 0x2F, 0xBA, 0x32, 0x3C, 0xBA, 0x3A, 0xB9, 0xB2, 0x09, 0xC2, 0xB0, 0x4C, 0x10, 0xAC, 0x6B, 0x82, 0x30, 0x30, 0x1B, 0x04, 0xC2, 0xD9, 0xB0, 0x10, 0xCA, 0x42, 0x10, 0x03, 0xD3, 0x34, 0xCD, 0xB3, 0x21, 0x80, 0x26, 0x08, 0xDE, 0xC6, 0xE0, 0x6B, 0x82, 0x30, 0x34, 0x1B, 0x10, 0x42, 0x9A, 0x08, 0x62, 0xA0, 0x80, 0x0D, 0x41, 0xB5, 0x81, 0x00, 0x22, 0x0B, 0x98, 0x20, 0x74, 0x1A, 0x87, 0xAF, 0x2F, 0xBC, 0x09, 0xC2, 0xE0, 0x4C, 0x10, 0x86, 0x67, 0x82, 0x30, 0x40, 0x13, 0x84, 0x21, 0x9A, 0x20, 0x58, 0xD8, 0x06, 0x04, 0xC9, 0x34, 0x62, 0xE3, 0x3A, 0x8F, 0xC3, 0xD7, 0x57, 0xDE, 0x04, 0x61, 0x90, 0x36, 0x20, 0x08, 0x18, 0x68, 0x61, 0xB0, 0x71, 0x9D, 0xC7, 0xE1, 0xEB, 0x4B, 0x6F, 0x82, 0x30, 0x4C, 0x1B, 0x10, 0x64, 0x0C, 0x34, 0x32, 0xD8, 0xB8, 0xCE, 0x23, 0x41, 0x97, 0xD6, 0x56, 0x36, 0x41, 0x18, 0xA8, 0x0D, 0x08, 0x62, 0x06, 0xDA, 0x19, 0x6C, 0x5D, 0xE7, 0x6D, 0x28, 0xA8, 0x4F, 0x0C, 0xCA, 0x00, 0x0D, 0x36, 0x0C, 0x04, 0x96, 0x06, 0x13, 0x04, 0x01, 0xD8, 0x00, 0x6C, 0x18, 0x08, 0x36, 0x60, 0x83, 0x0D, 0x41, 0x1B, 0x6C, 0x18, 0x86, 0x35, 0x70, 0x03, 0x1E, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x1B, 0x06, 0x32, 0x20, 0x83, 0x61, 0x83, 0x10, 0x06, 0x71, 0xB0, 0xA1, 0x58, 0x03, 0x38, 0x00, 0x2E, 0x39, 0x20, 0x22, 0x26, 0x17, 0xE6, 0x36, 0x86, 0x56, 0x36, 0x47, 0xC3, 0x8C, 0xED, 0x2D, 0x8C, 0x6E, 0x6E, 0x82, 0x30, 0x54, 0x2C, 0xD2, 0xDC, 0xE6, 0xE8, 0xE6, 0x26, 0x08, 0x83, 0x45, 0x22, 0xCD, 0x8D, 0x6E, 0x8E, 0x09, 0x5D, 0x19, 0xDE, 0xD7, 0x1C, 0xDD, 0x9B, 0x5C, 0x19, 0x8B, 0xBA, 0x34, 0x37, 0xBA, 0xB9, 0x0D, 0x0C, 0x1D, 0x30, 0x75, 0x60, 0x07, 0x77, 0x80, 0x07, 0x79, 0xB0, 0xE9, 0xC1, 0xB0, 0x07, 0x43, 0x15, 0x36, 0x36, 0xBB, 0x36, 0x97, 0x34, 0xB2, 0x32, 0x37, 0xBA, 0x29, 0x41, 0x50, 0x85, 0x0C, 0xCF, 0xC5, 0xAE, 0x4C, 0x6E, 0x2E, 0xED, 0xCD, 0x6D, 0x4A, 0x40, 0x34, 0x21, 0xC3, 0x73, 0xB1, 0x0B, 0x63, 0xB3, 0x2B, 0x93, 0x9B, 0x12, 0x14, 0x75, 0xC8, 0xF0, 0x5C, 0xE6, 0xD0, 0xC2, 0xC8, 0xCA, 0xE4, 0x9A, 0xDE, 0xC8, 0xCA, 0xD8, 0xA6, 0x04, 0x48, 0x19, 0x32, 0x3C, 0x17, 0xB9, 0xB2, 0xB9, 0xB7, 0x3A, 0xB9, 0xB1, 0xB2, 0xB9, 0x29, 0x81, 0x55, 0x89, 0x0C, 0xCF, 0x85, 0x2E, 0x0F, 0xAE, 0x2C, 0xC8, 0xCD, 0xED, 0x8D, 0x2E, 0x8C, 0x2E, 0xED, 0xCD, 0x6D, 0x6E, 0x8A, 0x90, 0x06, 0x6E, 0x50, 0x87, 0x0C, 0xCF, 0xA5, 0xCC, 0x8D, 0x4E, 0x2E, 0x0F, 0xEA, 0x2D, 0xCD, 0x8D, 0x6E, 0x6E, 0x4A, 0x20, 0x07, 0x5D, 0xC8, 0xF0, 0x5C, 0xC6, 0xDE, 0xEA, 0xDC, 0xE8, 0xCA, 0xE4, 0xE6, 0xA6, 0x04, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x9A, 0xBB, 0x9C, 0x95, 0xC7, 0x0F, 0xD7, 0x88, 0x7C, 0x0D, 0x55, 0x3C, 0xCD, 0xD7, 0xD7, 0x44, 0x58, 0x49, 0x4C, 0xF4, 0x06, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00, 0xBD, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xDC, 0x06, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0xB4, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xC4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x11, 0x23, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x84, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x6D, 0x30, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x09, 0xA8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xA4, 0x84, 0x04, 0x13, 0x23, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8C, 0x8C, 0x0B, 0x84, 0xC4, 0x4C, 0x10, 0x80, 0xC1, 0x08, 0x40, 0x09, 0x00, 0x0A, 0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0xC3, 0x30, 0x10, 0x51, 0x88, 0x61, 0x18, 0x06, 0x32, 0x66, 0x00, 0xCA, 0x80, 0x0C, 0x08, 0x25, 0x73, 0x04, 0x08, 0x2D, 0xF7, 0x0C, 0x97, 0x3F, 0x61, 0x0F, 0x21, 0xF9, 0x21, 0xD0, 0x0C, 0x0B, 0x81, 0x02, 0xA6, 0x2C, 0xC0, 0xD0, 0x0C, 0xC3, 0x80, 0x20, 0x08, 0xB2, 0x90, 0x73, 0xD4, 0x70, 0xF9, 0x13, 0xF6, 0x10, 0x92, 0xCF, 0x6D, 0x54, 0xB1, 0x12, 0x93, 0x5F, 0xDC, 0x36, 0x22, 0x10, 0x04, 0x41, 0x0A, 0x01, 0x0D, 0xCD, 0x40, 0xD1, 0x51, 0xC3, 0xE5, 0x4F, 0xD8, 0x43, 0x48, 0x3E, 0xB7, 0x51, 0xC5, 0x4A, 0x4C, 0x3E, 0x72, 0xDB, 0x88, 0x18, 0x86, 0x61, 0x28, 0xC4, 0x34, 0x34, 0x03, 0x51, 0x73, 0x04, 0x41, 0x31, 0x9A, 0x61, 0x19, 0x06, 0x8B, 0xAE, 0x81, 0x80, 0x61, 0x04, 0x02, 0x99, 0x89, 0x0C, 0xC6, 0x81, 0x1D, 0xC2, 0x61, 0x1E, 0xE6, 0xC1, 0x0D, 0x64, 0xE1, 0x16, 0x68, 0xA1, 0x1C, 0xF0, 0x81, 0x1E, 0xEA, 0x41, 0x1E, 0xCA, 0x41, 0x0E, 0x48, 0x81, 0x0F, 0xEC, 0xA1, 0x1C, 0xC6, 0x81, 0x1E, 0xDE, 0x41, 0x1E, 0xF8, 0xC0, 0x1C, 0xD8, 0xE1, 0x1D, 0xC2, 0x81, 0x1E, 0xD8, 0x00, 0x0C, 0xE8, 0xC0, 0x0F, 0xC0, 0xC0, 0x0F, 0x50, 0xA0, 0xD1, 0x76, 0xC1, 0x8F, 0x88, 0x61, 0x18, 0x10, 0xEA, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x0C, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x24, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x71, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x13, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0x87, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0xCF, 0x05, 0x04, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x4A, 0x60, 0x04, 0xA0, 0x1C, 0x8A, 0xA1, 0x08, 0x8A, 0xA3, 0x40, 0x0A, 0xA1, 0x20, 0xC8, 0x1A, 0x01, 0x20, 0x6E, 0x06, 0x80, 0xBC, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0xE5, 0xC6, 0x45, 0x66, 0x06, 0x06, 0xC7, 0xE5, 0x06, 0x04, 0xC5, 0x26, 0xA7, 0xAC, 0x86, 0xA6, 0x4C, 0x26, 0x07, 0x26, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x06, 0x64, 0x82, 0x30, 0x24, 0x1B, 0x84, 0x81, 0x98, 0x20, 0x0C, 0xCA, 0x06, 0x61, 0x30, 0x28, 0x8C, 0xCD, 0x4D, 0x10, 0x86, 0x65, 0xC3, 0x80, 0x24, 0xC4, 0x04, 0x81, 0x93, 0x08, 0x4C, 0x10, 0x06, 0x66, 0x82, 0x60, 0x45, 0x13, 0x84, 0xA1, 0xD9, 0x20, 0x10, 0xCF, 0x86, 0x85, 0x58, 0x18, 0x82, 0x18, 0x1A, 0xC7, 0x71, 0xA0, 0x0D, 0x41, 0x34, 0x41, 0xF0, 0xA6, 0x09, 0xC2, 0xE0, 0x6C, 0x40, 0x88, 0x89, 0x21, 0x88, 0x81, 0x02, 0x36, 0x04, 0xD5, 0x06, 0x02, 0x90, 0x2C, 0x60, 0x82, 0x20, 0x00, 0x3C, 0x8A, 0xF0, 0xCA, 0xC6, 0xEA, 0xE8, 0xCA, 0x26, 0x08, 0xC3, 0x33, 0x41, 0x18, 0xA0, 0x0D, 0xC3, 0xB6, 0x0D, 0x1B, 0x04, 0x8D, 0xDB, 0x50, 0x60, 0x19, 0x70, 0x75, 0x55, 0xD8, 0xD8, 0xEC, 0xDA, 0x5C, 0xD2, 0xC8, 0xCA, 0xDC, 0xE8, 0xA6, 0x04, 0x41, 0x15, 0x32, 0x3C, 0x17, 0xBB, 0x32, 0xB9, 0xB9, 0xB4, 0x37, 0xB7, 0x29, 0x01, 0xD1, 0x84, 0x0C, 0xCF, 0xC5, 0x2E, 0x8C, 0xCD, 0xAE, 0x4C, 0x6E, 0x4A, 0x60, 0xD4, 0x21, 0xC3, 0x73, 0x99, 0x43, 0x0B, 0x23, 0x2B, 0x93, 0x6B, 0x7A, 0x23, 0x2B, 0x63, 0x9B, 0x12, 0x24, 0x65, 0xC8, 0xF0, 0x5C, 0xE4, 0xCA, 0xE6, 0xDE, 0xEA, 0xE4, 0xC6, 0xCA, 0xE6, 0xA6, 0x04, 0x56, 0x1D, 0x32, 0x3C, 0x97, 0x32, 0x37, 0x3A, 0xB9, 0x3C, 0xA8, 0xB7, 0x34, 0x37, 0xBA, 0xB9, 0x29, 0x41, 0x07, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x30, 0x83, 0x81, 0xC8, 0x01, 0x1F, 0xDC, 0x40, 0x1C, 0xE4, 0xA1, 0x1C, 0xC2, 0x61, 0x1D, 0xDC, 0x40, 0x1C, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x70, 0x78, 0x17, 0x21, 0x50, 0x13, 0x61, 0x02, 0xD0, 0x70, 0xF9, 0xCE, 0xE3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x8F, 0xDC, 0xB6, 0x15, 0x6C, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x04, 0x54, 0x51, 0x10, 0x51, 0xE9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xF9, 0xC5, 0x6D, 0x9B, 0xC1, 0x36, 0x5C, 0xBE, 0xF3, 0xF8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0E, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x8F, 0xDC, 0xB6, 0x1D, 0x48, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x44, 0x04, 0x30, 0x11, 0x21, 0xD0, 0x0C, 0x0B, 0x61, 0x04, 0xD6, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0xC4, 0x35, 0x51, 0x11, 0xC1, 0x4E, 0x4E, 0x44, 0xF8, 0xC5, 0x6D, 0x5B, 0x80, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0xD3, 0x11, 0x11, 0xC0, 0x20, 0x0E, 0x3E, 0x72, 0xDB, 0x36, 0xF0, 0x0C, 0x97, 0xEF, 0x3C, 0x3E, 0xD5, 0x00, 0x11, 0xE6, 0x17, 0xB7, 0x0D, 0x00, 0x61, 0x20, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x13, 0x04, 0x44, 0x2C, 0x10, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x34, 0x94, 0x6E, 0x40, 0x61, 0x94, 0x5C, 0xD9, 0xD5, 0x40, 0x29, 0x95, 0x61, 0xC0, 0x0C, 0x00, 0x2D, 0xE5, 0x51, 0x04, 0x25, 0x40, 0xC8, 0x18, 0x01, 0x08, 0x82, 0x20, 0xFE, 0x8D, 0x11, 0x80, 0x20, 0x08, 0xA2, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0xC1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xFC, 0x01, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x70, 0x71, 0x4D, 0xA1, 0x69, 0xD2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x5C, 0x9D, 0x73, 0x6C, 0xDB, 0x34, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x04, 0x19, 0x44, 0xDC, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x65, 0x20, 0x79, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x40, 0x85, 0x01, 0x34, 0x78, 0xA3, 0x09, 0x01, 0x30, 0xDC, 0x40, 0x04, 0x64, 0x30, 0xCB, 0x10, 0x0C, 0xC1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x10, 0x69, 0x60, 0x79, 0xA3, 0x09, 0x44, 0x30, 0xDC, 0x60, 0x04, 0x64, 0x30, 0x9A, 0x60, 0x08, 0xC3, 0x0D, 0x44, 0x40, 0x06, 0x35, 0x04, 0x3A, 0xCB, 0x20, 0x0C, 0xC1, 0x2D, 0x48, 0xDD, 0x82, 0x54, 0x29, 0x1A, 0x14, 0xB2, 0xC1, 0x88, 0xC1, 0x01, 0x80, 0x20, 0x18, 0x18, 0x72, 0xB0, 0xB1, 0x81, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xC6, 0x1C, 0x70, 0x6D, 0x20, 0x9C, 0x80, 0xD8, 0x09, 0x88, 0x19, 0x22, 0xD0, 0xC7, 0x10, 0x81, 0x3E, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x10, 0xD5, 0xC1, 0x18, 0x58, 0x71, 0x30, 0x9A, 0x10, 0x0C, 0x16, 0x10, 0xF0, 0x31, 0x82, 0x83, 0x8F, 0x05, 0x03, 0x7C, 0xEC, 0xF8, 0xE0, 0x63, 0x41, 0x01, 0x9F, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xFC, 0x80, 0x0D, 0x8A, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0xFE, 0xA0, 0x0D, 0x88, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x48, 0x40, 0xC1, 0x0D, 0x06, 0x1B, 0xC4, 0x40, 0x3E, 0x36, 0x8C, 0x81, 0x7C, 0x6C, 0x20, 0x03, 0xF9, 0xD8, 0x50, 0x06, 0xF0, 0xB1, 0xC1, 0x0C, 0xE0, 0x63, 0xC3, 0x19, 0xC0, 0x67, 0xC4, 0xC0, 0x01, 0x40, 0x10, 0x0C, 0x1C, 0x53, 0x80, 0x83, 0x33, 0x28, 0x03, 0x32, 0x78, 0x83, 0x41, 0x08, 0xD6, 0xC0, 0x0D, 0x66, 0x09, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00];

                    /// <inheritdoc/>
                    public override unsafe Span<byte> GetSpan()
                    {
                        return new(Unsafe.AsPointer(ref MemoryMarshal.GetReference(Data)), Data.Length);
                    }

                    /// <inheritdoc/>
                    public override Memory<byte> Memory
                    {
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        get => CreateMemory(Data.Length);
                    }

                    /// <inheritdoc/>
                    public override unsafe MemoryHandle Pin(int elementIndex)
                    {
                        return new(Unsafe.AsPointer(ref Unsafe.AsRef(in Data[elementIndex])), pinnable: this);
                    }

                    /// <inheritdoc/>
                    public override void Unpin()
                    {
                    }

                    /// <inheritdoc/>
                    protected override void Dispose(bool disposing)
                    {
                    }
                }
            }
            """";

        await VerifyGeneratedDiagnosticsAsync(source, ("MyNamespace.MyShader.g.cs", result));
    }

    /// <summary>
    /// Verifies the output of a source generator.
    /// </summary>
    /// <param name="source">The input source to process.</param>
    /// <param name="result">The expected source to be generated.</param>
    /// <returns>The task for the operation.</returns>
    private static async Task VerifyGeneratedDiagnosticsAsync(string source, (string Filename, string Source) result)
    {
        await CSharpAnalyzerTest<ExcedeedComputeShaderDispatchDataSizeAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<InvalidComputeContextCopyAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<InvalidGeneratedComputeShaderDescriptorAttributeTargetAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<InvalidGloballyCoherentFieldDeclarationAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<InvalidGroupSharedFieldDeclarationAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<InvalidThreadGroupSizeAttributeUseAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<MissingAllowUnsafeBlocksCompilationOptionAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<MissingComputeShaderDescriptorOnComputeShaderAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<MultipleComputeShaderInterfacesOnShaderTypeAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<NotAccessibleFieldTypeInGeneratedShaderDescriptorAttributeTargetAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<NotAccessibleGeneratedComputeShaderDescriptorAttributeTargetAnalyzer>.VerifyAnalyzerAsync(source);
        await CSharpAnalyzerTest<NotReadOnlyComputeShaderTypeWithFieldsAnalyzer>.VerifyAnalyzerAsync(source);

        CSharpGeneratorTest<ComputeShaderDescriptorGenerator>.VerifySources(source, result);
    }
}