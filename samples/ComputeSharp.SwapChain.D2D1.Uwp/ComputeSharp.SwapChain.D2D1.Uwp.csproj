<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows10.0.22621.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <WindowsSdkPackageVersion>10.0.22621.54</WindowsSdkPackageVersion>
    <UseUwp>true</UseUwp>
    <UseUwpTools>true</UseUwpTools>
    <Platforms>x64;arm64</Platforms>
    <RuntimeIdentifiers>win-x64;win-arm64</RuntimeIdentifiers>
    <DefaultLanguage>en-US</DefaultLanguage>
    <PublishProfile>win-$(Platform).pubxml</PublishProfile>
    <EnableMsixTooling>true</EnableMsixTooling>
    <EnableXamlCompilerTargetsForUwpApps>false</EnableXamlCompilerTargetsForUwpApps>
  </PropertyGroup>

  <!-- NativeAOT settings, and size saving options for unnecessary features (optimize for speed otherwise) -->
  <PropertyGroup>
    <PublishAot>true</PublishAot>
    <UseSystemResourceKeys>true</UseSystemResourceKeys>
    <InvariantGlobalization>true</InvariantGlobalization>
    <StackTraceSupport>false</StackTraceSupport>
    <OptimizationPreference>Speed</OptimizationPreference>
    <CsWinRTEnableDynamicObjectsSupport>false</CsWinRTEnableDynamicObjectsSupport>
    <CsWinRTUseExceptionResourceKeys>true</CsWinRTUseExceptionResourceKeys>
    <CsWinRTEnableDefaultCustomTypeMappings>false</CsWinRTEnableDefaultCustomTypeMappings>
    <CsWinRTEnableICustomPropertyProviderSupport>false</CsWinRTEnableICustomPropertyProviderSupport>
    <CsWinRTEnableIDynamicInterfaceCastableSupport>false</CsWinRTEnableIDynamicInterfaceCastableSupport>
  </PropertyGroup>

  <!--
    If experimental support for Xbox is enabled, link against 'WindowsApp.lib'.
    Additionally, set the AppContainer switch, as Xbox might be validating that.
  -->
  <ItemGroup Condition="'$(EXPERIMENTAL_XBOX_SUPPORT)' == 'true'">
    <LinkerArg Include="/APPCONTAINER /DEFAULTLIB:WindowsApp.lib WindowsApp.lib" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Windows.CsWinRT" Version="2.1.6" />

    <!--
      This sample does not need WebView2, but WinAppSDK is pulling it in as a transitive NuGet
      dependency. We can manually exclude all of its assets to avoid them being in the output.
      This also prevents the old projections from being referenced and triggering the generator.
    -->
    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.2792.45" IncludeAssets="none" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\ComputeSharp.Core.SourceGenerators\ComputeSharp.Core.SourceGenerators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="contentfiles;build" />
    <ProjectReference Include="..\..\src\ComputeSharp.D2D1.Uwp\ComputeSharp.D2D1.Uwp.csproj" />
    <ProjectReference Include="..\..\src\ComputeSharp.D2D1\ComputeSharp.D2D1.csproj" />
    <ProjectReference Include="..\..\src\ComputeSharp.D2D1.SourceGenerators\ComputeSharp.D2D1.SourceGenerators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="contentfiles;build" />
  </ItemGroup>

  <!-- Shared projects for the D2D1 shaders -->
  <Import Project="..\ComputeSharp.SwapChain.Shaders.D2D1\ComputeSharp.SwapChain.Shaders.D2D1.projitems" Label="Shared" />
</Project>