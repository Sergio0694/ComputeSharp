<#@include file="Hlsl.Void.ttinclude" #>
using ComputeSharp.Core.Intrinsics.Attributes;
using ComputeSharp.Exceptions;

namespace ComputeSharp;

/// <inheritdoc cref="Hlsl"/>
partial class Hlsl
{
<#
PushIndent("    ");

bool isFirst = true;

foreach (var intrinsic in Intrinsics)
{
    foreach (var overload in intrinsic.Overloads)
    {
        if (isFirst) isFirst = false;
        else WriteLine("");

        WriteLine("/// <summary>");
        WriteLine($"/// {intrinsic.Summary}");
        WriteLine("/// </summary>");

        foreach (var param in intrinsic.Parameters)
        {
            WriteLine($"/// <param name=\"{param.Name}\">{param.Info}</param>");
        }

        if (intrinsic.Remarks.Length > 0)
        {
            var lines = intrinsic.Remarks.Replace("\r", "").Split('\n');

            WriteLine("/// <remarks>");

            foreach (var line in lines)
            {
                string trimmedLine = line.Trim();

                if (trimmedLine.Length > 0)
                {
                    WriteLine($"/// {trimmedLine}");
                }
            }

            WriteLine("/// <para>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</para>");
            WriteLine("/// </remarks>");
        }
        else
        {
            WriteLine("/// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>");
        }

        WriteLine($"[HlslIntrinsicName(\"{intrinsic.HlslName}\")]");

        Write($"public static void {intrinsic.Name}(");
        Write(string.Join(", ", intrinsic.Parameters.Zip(overload, (a, b) => $"{(a.IsOut ? "out " : "")}{b} {a.Name}")));
        Write(")");

        Write(" => throw new InvalidExecutionContextException(");

        var parameters = string.Join(", ", overload.Select(t => $"{{typeof({t})}}"));

        WriteLine($"$\"{{typeof(Hlsl)}}.{{nameof({intrinsic.Name})}}({parameters})\");");    
    }
}

PopIndent();
#>
}
