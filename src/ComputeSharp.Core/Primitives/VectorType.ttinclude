<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs"#>
<#
IEnumerable<string> EnumeratePropertyNames(string characters)
{
    static IEnumerable<string> EnumeratePropertyNames(
        string characters,
        StringBuilder builder,
        int remainingCount)
    {
        foreach (char c in characters)
        {
            builder.Append(c);

            if (remainingCount == 1)
            {
                yield return builder.ToString();
            }
            else
            {
                foreach (string name in EnumeratePropertyNames(characters, builder, remainingCount - 1))
                {
                    yield return name;
                }
            }

            builder.Remove(builder.Length - 1, 1);
        }
    }

    StringBuilder builder = new StringBuilder(4);

    for (int length = 1; length <= 4; length++)
    {
        foreach (string name in EnumeratePropertyNames(characters, builder, length))
        {
            yield return name;
        }
    }
}

// Generates all vector access properties for a specified type
void GenerateVectorProperties(string typeName, int elementSize)
{
    string elementTypeName = Regex.Match(typeName, @"^[A-Za-z]+").Value;
    string hlslElementTypeName = elementTypeName.ToLower();
    int i = int.Parse(Regex.Match(typeName, @"\d+$").Value);
    string formattable = elementTypeName == "Bool" ? "" : "ISpanFormattable";

    if (elementTypeName != "Bool")
    {
        WriteLine("using System;");
        WriteLine("using System.Globalization;");
    }
#>
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
#if !NET6_0_OR_GREATER
using RuntimeHelpers = ComputeSharp.Core.NetStandard.System.Runtime.CompilerServices.RuntimeHelpers;
using MemoryMarshal = ComputeSharp.Core.NetStandard.System.Runtime.InteropServices.MemoryMarshal;
#endif

#nullable enable

namespace ComputeSharp;

/// <inheritdoc cref="<#=typeName#>"/>
[StructLayout(LayoutKind.Explicit, Size = <#=(elementSize * i)#>, Pack = <#=elementSize#>)]
public unsafe partial struct <#=typeName#>
<#
    if (formattable != "")
    {
#>
#if NET6_0_OR_GREATER
    : <#=formattable#>
#endif
<#
    }
#>
{
    /// <summary>
    /// A private buffer to which the undefined properties will point to.
    /// </summary>
    private static readonly void* UndefinedData = (void*)RuntimeHelpers.AllocateTypeAssociatedMemory(typeof(<#=typeName#>), sizeof(<#=elementTypeName#>4));
<#
    WriteLine("");
    PushIndent("    ");

    // Generate the private fields
    foreach (char name in "xyzw".Substring(0, i))
    {
        WriteLine($"[FieldOffset({"xyzw".IndexOf(name) * elementSize})]");
        WriteLine($"private {hlslElementTypeName} {name};");
        WriteLine("");
    }

    PopIndent();
#>
    /// <summary>
    /// Gets a reference to a specific component in the current <see cref="<#=typeName#>"/> instance.
    /// </summary>
    /// <param name="i">The index of the component to access.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public readonly ref <#=hlslElementTypeName#> this[int i] => ref *(<#=hlslElementTypeName#>*)UndefinedData;
<#
    PushIndent("    ");

    // Generate the combinatorial swizzling properties
    foreach (
        var propertyName in
        from source in new[] { "XYZW", "RGBA" }
        let range = source.Substring(0, i)
        from name in EnumeratePropertyNames(range)
        select name)
    {
        WriteLine("");

        string propertyType = propertyName.Length == 1 ? hlslElementTypeName : $"{elementTypeName}{propertyName.Length}";
        bool isReadonly = propertyName.Distinct().Count() < propertyName.Length;
        string refType = isReadonly ? "ref readonly" : "ref";

        // XML docs
        WriteLine("/// <summary>");
        if (propertyName.Length == 1)
        {
            WriteLine($"/// Gets a reference to the <see cref=\"{propertyType}\"/> value representing the <c>{propertyName}</c> component.");
            WriteLine("/// </summary>");

            char fieldName = "xyzw"["xyzwrgba".IndexOf(propertyName.ToLower()) % 4];

            // Property
            Write($"public readonly {refType} {propertyType} {propertyName} ");
            WriteLine($"=> ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Unsafe.AsRef(in this.{fieldName}), 1));");
        }
        else
        {
            Write("/// Gets a ");
            if (isReadonly) Write("readonly ");
            Write($"reference to the <see cref=\"{propertyType}\"/> value with the components ");
            Write(string.Join(", ", propertyName.Select(c => $"<see cref=\"{c}\"/>")));
            WriteLine(".");
            WriteLine("/// </summary>");
            WriteLine("/// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>");

            // Property
            Write($"public readonly {refType} {propertyType} {propertyName} ");
            WriteLine($"=> ref *({propertyType}*)UndefinedData;");
        }
    }

    PopIndent();
    WriteLine("");

#>
#if !SOURCE_GENERATOR

<#

    if (elementTypeName == "Bool")
    {
#>
    /// <inheritdoc/>
    public override readonly string ToString()
    {
#if NET6_0_OR_GREATER
        return string.Create(null, stackalloc char[32], $"<<#=string.Join(", ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>");
#else
        return $"<<#=string.Join(", ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>";
#endif
    }
<#
    }
    else
    {
#>
    /// <inheritdoc/>
    public override readonly string ToString()
    {
        string separator = NumberFormatInfo.CurrentInfo.NumberGroupSeparator;

#if NET6_0_OR_GREATER
        return string.Create(null, stackalloc char[64], $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>");
#else
        return $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>";
#endif
    }

    /// <inheritdoc/>
    public readonly string ToString(string? format, IFormatProvider? formatProvider)
    {
        string separator = NumberFormatInfo.GetInstance(formatProvider).NumberGroupSeparator;

        return FormatInterpolatedStringHandler.Create(
            format,
            formatProvider,
            stackalloc char[64],
            $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>");
    }

    /// <inheritdoc/>
    public readonly bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        string separator = NumberFormatInfo.GetInstance(provider).NumberGroupSeparator;

        return TryWriteFormatInterpolatedStringHandler.TryWrite(
            destination,
            format,
            provider,
            $"<<#=string.Join("{separator} ", "xyzw".Take(i).Select(c => $"{{this.{c}}}"))#>>",
            out charsWritten);
    }
<#
    }

#>

#endif
<#

    // Generate the negation operator
    if (elementTypeName != "UInt")
    {
        WriteLine("");

        string argumentName = "xyzw".Substring(0, i);
        string operatorName = elementTypeName == "Bool" ? "!" : "-";
#>
    /// <summary>
    /// Negates a <see cref="<#=typeName#>"/> value.
    /// </summary>
    /// <param name="<#=argumentName#>">The <see cref="<#=typeName#>"/> value to negate.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator <#=operatorName#>(<#=typeName#> <#=argumentName#>) => default;
<#
    }

    // Generate the numerical operators
    if (elementTypeName != "Bool")
    {
        WriteLine("");
#>
    /// <summary>
    /// Sums two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to sum.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to sum.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator +(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Divides two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to divide.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to divide.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator /(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Multiplies two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to multiply.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator *(<#=typeName#> left, <#=typeName#> right) => default;

    /// <summary>
    /// Subtracts two <see cref="<#=typeName#>"/> values.
    /// </summary>
    /// <param name="left">The first <see cref="<#=typeName#>"/> value to subtract.</param>
    /// <param name="right">The second <see cref="<#=typeName#>"/> value to subtract.</param>
    /// <remarks>This method is an intrinsic and can only be used within a shader on the GPU. Using it on the CPU is undefined behavior.</remarks>
    public static <#=typeName#> operator -(<#=typeName#> left, <#=typeName#> right) => default;
<#
    }
#>
}
<#
}
#>